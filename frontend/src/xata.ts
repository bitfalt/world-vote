// Generated by Xata Codegen 0.30.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Polls",
    columns: [
      { name: "category", type: "link", link: { table: "Category" } },
      { name: "smartContractAddress", type: "string", unique: true },
      { name: "name", type: "string", notNull: true, defaultValue: "none" },
      { name: "private", type: "int", notNull: true, defaultValue: "0" },
      { name: "pollCode", type: "int", unique: true },
    ],
  },
  {
    name: "Category",
    columns: [
      { name: "name", type: "string", notNull: true, defaultValue: "TBD" },
    ],
    revLinks: [{ column: "category", table: "Polls" }],
  },
  {
    name: "Attestations",
    columns: [
      { name: "walletAddress", type: "string", unique: true },
      { name: "attestationUID", type: "string", unique: true },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Polls = InferredTypes["Polls"];
export type PollsRecord = Polls & XataRecord;

export type Category = InferredTypes["Category"];
export type CategoryRecord = Category & XataRecord;

export type Attestations = InferredTypes["Attestations"];
export type AttestationsRecord = Attestations & XataRecord;

export type DatabaseSchema = {
  Polls: PollsRecord;
  Category: CategoryRecord;
  Attestations: AttestationsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://bitfalt-mmda85.us-east-1.xata.sh/db/world-vote:main",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
